<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="cptCisla">Letter Numbers</string>
    <string name="tCDSoust">Base:</string>
    <string name="tCDInterp">Assignment:</string>
    <string name="tCDVstup">Input – click to accept:</string>
    <string name="tCDKlav">Number pad:</string>
    <string name="tCRSeznam">Table:</string>
    <string name="tCRPismeno">Ltr.</string>
    <string name="tCRs2">bin</string>
    <string name="tCRs3">ter</string>
    <string name="tCRs8">oct</string>
    <string name="tCRs10">dec</string>
    <string name="tCRs16">hex</string>
    <string name="tCRRim">Rom</string>
    <string name="tCRPerm">perm.</string>

	
<string name="tHelpCisla"><![CDATA[
<h1>Letter Numbers</h1>

<p>This component simplifies the conversions between letters and their corresponding number
in the alphabetical order. ASCII encoding is also available.</p>


<h3>Basic usage</h3>

<p>Use the two menus in the top to choose the desired base (radix) and the way the numbers
are to be interpreted (1- or 0-based, cyclical, or as an ASCII code). These affect the look
and feel of the main input field. Use the number pad displayed to input the numbers forming
the ciphertext. The lower part of the screen displays the current numeric value and its
corresponding letter. Tap it to append it to the <i>Plaintext</i> field below and reset
the input. Note that the plaintext is only kept for your convenience, the letters have no
other use once they are accepted, nor does the app recompute them should the numbering change.</p>


<h3>Meaning of the options offered</h3>

<h5>Numbers 1 – <i>N</i>, 0 – <i>N</i>-1, Modulo <i>N</i>, ASCII</h5>

<p>The first and second options specify that the numbers are treated directly as letter numbers
in 1- or 0-based numbering of the alphabet, respectively. Numbers falling outside of the range
are considered invalid and a question mark appears if they are input. In the <i>Modulo</i>
options, the alphabet is treated as cyclically repeating, so arbitrarily large numbers are
meaningful.</p>

<p>The value of <i>N</i> above corresponds to the number of letters forming the alphabet.
This is 26 by default but can be altered in the preferences by taking nonstandard alphabets
orderings. If the app gives strange answers, please inspect the Preferences if a plain English
alphabet is being indeed used.</p>

<p>The last option on the list takes the number as indices in the ASCII character table, used
in modern computing. Plain English letters are mapped to numbers 65 through 90 (capital letters)
and 97 through 122 (small letters), other numbers between 32 and 127 also have meanings,
representing various characters present in the computer keyboard. Some advanced characters
like £ lie outside of the basic ASCII set and are not reachable in this app.</p>


<h5>Permutations</h5>

<p>The special value of the <i>Base</i> field designed <i>Permutations</i> denotes \"numbering\" the
alphabet using permutations of four symbols. Here an input is only valid if it is a valid
permutation of ABCD, i.e., if each letter is used exactly once in some order. The 24 different
orders of four different letters then encode 24 different characters: ABCD represents A,
AB<b>DC</b>, being the next (lexicographically) possible order, represents B, and so on. The \"highest\"
permutation is DCBA, which then corresponds to the letter Z.</p>

<p>As the number of distinct letters in the English alphabet is larger than 24, two letters
need to be left out before permutation encoding is used. For this purpose, two of the least used
letters, Q and X, are invariably chosen. The <i>Meaning</i> field is ignored when permutation
indexing is chosen.</p>

<p>Permutation indexing is offered in two slightly different flavours, explained by the mathematical
theory of permutations as one may want to take the \"inverse\" first. If you are sure that permutation
indexing is the key to the cipher yet <i>Permutations</i> results in strangely distorted
plaintext, consider trying <i>Inverse permutations</i>.</p>


<h3>Preferences</h3>

<p>This component uses the global settings of alphabet. These can be used to alter the letter numbering
by skipping some of the least frequent letters J, Q, or X. Please note that the same setting is shared
with <i>Substitution Ciphers</i> which also use the alphabetical order.</p>


<h3>Tips and tricks</h3>

<p>The <i>Reference</i> tab contains a lot of information. If you are using the app on a cell phone
screen, the table will be trimmed so it fits on the display, and some columns will not be shown.
Please rotate your screen to landscape to display all columns.</p>
]]></string>


    <string-array name="pataCDInterp">
        <item>Numbers 1 – %d</item>
        <item>Numbers 0 – %d</item>
        <item>Modulo %d (1-based)</item>
        <item>Modulo %d (0-based)</item>
        <item>ASCII</item>
    </string-array>

    <array name="iaCDInterp">
        <item>@id/idCDPrimo1</item>
        <item>@id/idCDPrimo0</item>
        <item>@id/idCDModulo1</item>
        <item>@id/idCDModulo0</item>
        <item>@id/idCDASCII</item>
    </array>


    <string-array name="saCDSoustavy">
        <item>Binary</item>
        <item>Ternary</item>
        <item>Octal</item>
        <item>Decimal</item>
        <item>Hexadecimal</item>
        <item>Roman numerals</item>
        <item>Permutations (-Q,X)</item>
        <item>Inverse permutations</item>
    </string-array>

    <array name="iaCDSoustavyMody">
        <item>@id/idCDCisla</item>
        <item>@id/idCDCisla</item>
        <item>@id/idCDCisla</item>
        <item>@id/idCDCisla</item>
        <item>@id/idCDCisla</item>
        <item>@id/idCDRim</item>
        <item>@id/idCDPerm1</item>
        <item>@id/idCDPerm2</item>
    </array>

    <integer-array name="iaCDSoustavyZaklady">
        <item>2</item>
        <item>3</item>
        <item>8</item>
        <item>10</item>
        <item>16</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
    </integer-array>


    <string-array name="saCRGroups">
        <item>Order in alphabet (1-based)</item>
        <item>Order in alphabet (0-based)</item>
        <item>ASCII uppercase</item>
        <item>ASCII lowercase</item>
    </string-array>

    <array name="iaCRGroups">
        <item>@id/idCRAbeceda1</item>
        <item>@id/idCRAbeceda0</item>
        <item>@id/idCRASCIIVelke</item>
        <item>@id/idCRASCIIMale</item>
    </array>


    <string-array name="saCCGroups">
        <item>1-based</item>
        <item>0-based</item>
        <item>ASCII codes</item>
    </string-array>

    <array name="iaCCGroups">
        <item>@id/idCCOd1</item>
        <item>@id/idCCOd0</item>
        <item>@id/idCCASCII</item>
    </array>

    <string-array name="saCCSoustavyPrimo">
        <item>Decimal</item>
        <item>Binary</item>
        <item>Ternary</item>
        <item>Octal</item>
        <item>Hexadecimal</item>
        <item>Roman numerals</item>
        <item>Permutations</item>
    </string-array>

    <array name="iaCCSoustavyPrimoMody">
        <item>@id/idCDCisla</item>
        <item>@id/idCDCisla</item>
        <item>@id/idCDCisla</item>
        <item>@id/idCDCisla</item>
        <item>@id/idCDCisla</item>
        <item>@id/idCDRim</item>
        <item>@id/idCDPerm1</item>
    </array>

    <integer-array name="iaCCSoustavyPrimoZaklady">
        <item>10</item>
        <item>2</item>
        <item>3</item>
        <item>8</item>
        <item>16</item>
        <item>0</item>
        <item>0</item>
    </integer-array>

    <string-array name="saCCSoustavyASCII">
        <item>Decimal</item>
        <item>Binary</item>
        <item>Octal</item>
        <item>Hexadecimal</item>
    </string-array>

    <array name="iaCCSoustavyASCIIMody">
        <item>@id/idCDCisla</item>
        <item>@id/idCDCisla</item>
        <item>@id/idCDCisla</item>
        <item>@id/idCDCisla</item>
    </array>

    <integer-array name="iaCCSoustavyASCIIZaklady">
        <item>10</item>
        <item>2</item>
        <item>8</item>
        <item>16</item>
    </integer-array>

</resources>
